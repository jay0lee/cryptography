name: Wheel Builder
permissions:
  contents: write
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to build
  # Do not add any non-tag push events without updating pypi-publish.yml. If
  # you do, it'll upload wheels to PyPI.
  push:
  pull_request:
    paths:
      - .github/workflows/wheel-builder.yml
      - .github/requirements/**
      - pyproject.toml
      - vectors/pyproject.toml

env:
  BUILD_REQUIREMENTS_PATH: .github/requirements/build-requirements.txt
  UV_REQUIREMENTS_PATH: .github/requirements/uv-requirements.txt

jobs:
  sdist:
    runs-on: ubuntu-latest
    name: sdists
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false

      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: "3.13"
        timeout-minutes: 3
      - run: python -m pip install -r $UV_REQUIREMENTS_PATH

      - name: Make sdist (cryptography)
        run: uv build --build-constraint=$BUILD_REQUIREMENTS_PATH --require-hashes --sdist
      - name: Make sdist and wheel (vectors)
        run: uv build --build-constraint=$BUILD_REQUIREMENTS_PATH --require-hashes vectors/
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "cryptography-sdist"
          path: dist/cryptography*
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "vectors-sdist-wheel"
          path: vectors/dist/cryptography*

  windows:
    needs: [sdist]
    runs-on: ${{ matrix.WINDOWS.os }}
    strategy:
      fail-fast: false
      matrix:
        WINDOWS:
          - {os: 'windows-11-arm', ARCH: 'arm64', WINDOWS: 'arm64', RUST_TRIPLE: 'aarch64-pc-windows-msvc'}
          #- {os: 'windows-2019', ARCH: 'x64', WINDOWS: 'win64', RUST_TRIPLE: 'x86_64-pc-windows-msvc'}
        PYTHON:
          - {VERSION: "3.13"}
    name: "${{ matrix.PYTHON.VERSION }} ${{ matrix.WINDOWS.WINDOWS }}"
    steps:
      - name: Get build-requirements.txt from repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
          sparse-checkout: |
            ${{ env.BUILD_REQUIREMENTS_PATH }}
            ${{ env.UV_REQUIREMENTS_PATH }}
          sparse-checkout-cone-mode: false

      - uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: cryptography-sdist

      - name: Setup python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
          architecture: ${{ matrix.WINDOWS.ARCH }}

      - uses: jay0lee/rust-toolchain@0670fab76b6bb4fc760697fd3b2ae51e27581a98
        with:
          toolchain: stable
          target: ${{ matrix.WINDOWS.RUST_TRIPLE }}

      - uses: dawidd6/action-download-artifact@07ab29fd4a977ae4d2b275087cf67563dfdf0295 # v9
        with:
          repo: pyca/infra
          workflow: build-windows-openssl.yml
          branch: main
          workflow_conclusion: success
          name: "openssl-${{ matrix.WINDOWS.WINDOWS }}"
          path: "C:/openssl-${{ matrix.WINDOWS.WINDOWS }}/"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure OpenSSL
        run: |
            echo "OPENSSL_DIR=C:/openssl-${{ matrix.WINDOWS.WINDOWS }}" >> $GITHUB_ENV
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        shell: bash

      - run: pip install -r "${UV_REQUIREMENTS_PATH}"
        shell: bash
      - run: mkdir wheelhouse
      - run: |
          echo "BUILD REQ PATH:"
          cat "$BUILD_REQUIREMENTS_PATH"
          echo "UV_REQUIREMENTS_PATH"
          cat "$UV_REQUIREMENTS_PATH"
          uv build --wheel --require-hashes --build-constraint=$BUILD_REQUIREMENTS_PATH cryptography*.tar.gz -o wheelhouse/
        shell: bash

      - run: uv venv
      - run: uv pip install --require-hashes -r "${BUILD_REQUIREMENTS_PATH}"
        shell: bash
      - run: uv pip install cryptography --no-index -f wheelhouse/
      - name: Print the OpenSSL we built and linked against
        run: |
            echo "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))" | uv run -

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "cryptography-${{ github.event.inputs.version }}-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.VERSION }}"
          path: wheelhouse/*.whl

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          automatic_release_tag: "latest"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          draft: false
          title: "Wheel Build"
          files: |
            wheelhouse/*.whl
