name: Wheel Builder
permissions:
  contents: write
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to build
  # Do not add any non-tag push events without updating pypi-publish.yml. If
  # you do, it'll upload wheels to PyPI.
  push:
  pull_request:
    paths:
      - .github/workflows/wheel-builder.yml
      - .github/requirements/**
      - pyproject.toml
      - vectors/pyproject.toml

env:
  BUILD_REQUIREMENTS_PATH: .github/requirements/build-requirements.txt
  UV_REQUIREMENTS_PATH: .github/requirements/uv-requirements.txt
  OPENSSL_CONFIG_OPTS: no-fips --api=3.0.0
  OPENSSL_DIR: ${{ github.workspace }}/bin/ssl
  OPENSSL_SOURCE_PATH: ${{ github.workspace }}/src/openssl
  OPENSSL_STATIC: 1

jobs:
  sdist:
    runs-on: ubuntu-latest
    name: sdists
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: "44.0.2"
          repository: "pyca/cryptography"
          persist-credentials: false

      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: "3.13"
        timeout-minutes: 3
      - run: python -m pip install -r $UV_REQUIREMENTS_PATH

      - name: Make sdist (cryptography)
        run: uv build --build-constraint=$BUILD_REQUIREMENTS_PATH --require-hashes --sdist
      - name: Make sdist and wheel (vectors)
        run: uv build --build-constraint=$BUILD_REQUIREMENTS_PATH --require-hashes vectors/
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "cryptography-sdist"
          path: dist/cryptography*
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "vectors-sdist-wheel"
          path: vectors/dist/cryptography*

  windows:
    needs: [sdist]
    runs-on: ${{ matrix.WINDOWS.os }}
    strategy:
      fail-fast: false
      matrix:
        WINDOWS:
          - {os: 'windows-11-arm', ARCH: 'arm64', WINDOWS: 'arm64', RUST_TRIPLE: 'aarch64-pc-windows-msvc'}
          #- {os: 'windows-2019', ARCH: 'x64', WINDOWS: 'win64', RUST_TRIPLE: 'x86_64-pc-windows-msvc'}
        PYTHON:
          - {VERSION: "3.13"}
    name: "${{ matrix.PYTHON.VERSION }} ${{ matrix.WINDOWS.WINDOWS }}"
    steps:
      - name: Get build-requirements.txt from repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
          sparse-checkout: |
            ${{ env.BUILD_REQUIREMENTS_PATH }}
            ${{ env.UV_REQUIREMENTS_PATH }}
          sparse-checkout-cone-mode: false

      - uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: cryptography-sdist

      - run: |
          tar xvvf cryptography.tar.gz
          ls -al

      - name: Setup python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
          architecture: ${{ matrix.WINDOWS.ARCH }}

      - name: Windows Configure VCode
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
        with:
          arch: ${{ runner.arch }}

      - uses: jay0lee/rust-toolchain@0670fab76b6bb4fc760697fd3b2ae51e27581a98
        with:
          toolchain: stable
          target: ${{ matrix.WINDOWS.RUST_TRIPLE }}

      - name: Get latest stable OpenSSL source
        shell: bash
        run: |
          mkdir -vp "${GITHUB_WORKSPACE}/src"
          cd "${GITHUB_WORKSPACE}/src"
          git clone https://github.com/openssl/openssl.git
          cd "${OPENSSL_SOURCE_PATH}"
          export LATEST_STABLE_TAG=$(git tag --list openssl-* | grep -v alpha | grep -v beta | sort -Vr | head -n1)
          echo "Checking out version ${LATEST_STABLE_TAG}"
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_OPENSSL_VERSION=${LATEST_STABLE_TAG:8} # Trim the openssl- prefix
          echo "COMPILED_OPENSSL_VERSION=${COMPILED_OPENSSL_VERSION}" >> $GITHUB_ENV

      - name: Windows NASM Install
        uses: ilammy/setup-nasm@v1
        if: runner.os == 'Windows' && runner.arch == 'X64'

      - name: Config OpenSSL
        shell: bash
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          # TODO: remove this once https://github.com/openssl/openssl/issues/26239 is fixed.
          if ([ "$RUNNER_OS" == "Windows" ] && [ "$RUNNER_ARCH" == "ARM64" ]); then
            export CFLAGS=-DNO_INTERLOCKEDOR64
          fi
          # --libdir=lib is needed so Python can find OpenSSL libraries
          "c:\strawberry\perl\bin\perl.exe" ./Configure VC-WIN64-ARM --prefix="$OPENSSL_DIR" # $OPENSSL_CONFIG_OPTS

      - name: Rename GNU link on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mv -v /usr/bin/link /usr/bin/gnulink

      - name: Make OpenSSL
        shell: bash
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          # TODO: remove this once https://github.com/openssl/openssl/issues/26239 is fixed.
          if ([ "$RUNNER_OS" == "Windows" ] && [ "$RUNNER_ARCH" == "ARM64" ]); then
            export CFLAGS=-DNO_INTERLOCKEDOR64
          fi
          nmake

      - name: Install OpenSSL
        shell: bash
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          # install_sw saves us ages processing man pages :-)
          nmake install

      - name: Run OpenSSL
        shell: bash
        run: |
          "${OPENSSL_DIR}/bin/openssl" version -a
          file "${OPENSSL_DIR}/bin/openssl"

      #- run: pip install -r "${UV_REQUIREMENTS_PATH}"
      #  shell: bash
      #- run: mkdir wheelhouse
      #- run: |
      #    echo "BUILD REQ PATH:"
      #    cat "$BUILD_REQUIREMENTS_PATH"
      #    echo "UV_REQUIREMENTS_PATH"
      #    cat "$UV_REQUIREMENTS_PATH"
      #    uv build --wheel --require-hashes --build-constraint=$BUILD_REQUIREMENTS_PATH cryptography*.tar.gz -o wheelhouse/
      #  shell: bash

      #- run: uv venv
      #- run: uv pip install --require-hashes -r "${BUILD_REQUIREMENTS_PATH}"
      #  shell: bash
      #- run: uv pip install cryptography --no-index -f wheelhouse/
      
    - name: Build  wheel
      uses: pypa/cibuildwheel@v2.23.2
      with:
        only: cp313-win_arm64
        package-dir: cryptography
      - name: Print the OpenSSL we built and linked against
        run: |
            echo "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))" | uv run -

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "cryptography-${{ github.event.inputs.version }}-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.VERSION }}"
          path: wheelhouse/*.whl

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          automatic_release_tag: "latest"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          draft: false
          title: "Wheel Build"
          files: |
            wheelhouse/*.whl
